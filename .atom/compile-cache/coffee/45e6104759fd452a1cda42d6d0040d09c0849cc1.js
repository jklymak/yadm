(function() {
  var CompositeDisposable, FileHandler, Point, Session, fs, message, mkdirp, net, os, path, randomstring, ref;

  ref = require('atom'), CompositeDisposable = ref.CompositeDisposable, Point = ref.Point;

  net = require('net');

  fs = require('fs');

  os = require('os');

  path = require('path');

  mkdirp = require('mkdirp');

  randomstring = require('./randomstring');

  status - (message = require('./status-message'));

  FileHandler = (function() {
    function FileHandler(session) {
      this.session = session;
      this.settings = {};
      this.readbytes = 0;
      this.ready = false;
    }

    FileHandler.prototype.set = function(index, value) {
      var m;
      this.settings[index] = value;
      if (index === "display-name") {
        m = value.match(/(.*?):(.*)$/);
        if (m && (m[2] != null)) {
          this.remote_address = value.split(":")[0];
          return this.basename = path.basename(value.split(":")[1]);
        } else {
          this.remote_address = "unknown";
          return this.basename = value;
        }
      } else if (index === "data") {
        return this.datasize = parseInt(value, 10);
      }
    };

    FileHandler.prototype.get = function(index) {
      return this.settings[index];
    };

    FileHandler.prototype.create = function() {
      var dirname;
      this.tempfile = path.join(os.tmpdir(), randomstring(10), this.basename);
      console.log("[ratom] create " + this.tempfile);
      dirname = path.dirname(this.tempfile);
      mkdirp.sync(dirname);
      return this.fd = fs.openSync(this.tempfile, 'w');
    };

    FileHandler.prototype.append = function(line) {
      if (this.readbytes < this.datasize) {
        this.readbytes += Buffer.byteLength(line);
        if (this.readbytes === this.datasize + 1 && line.slice(-1) === "\n") {
          this.readbytes = this.datasize;
          line = line.slice(0, -1);
        }
        fs.writeSync(this.fd, line);
      }
      if (this.readbytes >= this.datasize) {
        fs.closeSync(this.fd);
        return this.ready = true;
      }
    };

    FileHandler.prototype.open = function() {
      atom.focus();
      console.log("[ratom] opening " + this.tempfile);
      return atom.workspace.open(this.tempfile, {
        activatePane: true
      }).then((function(_this) {
        return function(editor) {
          return _this.handle_connection(editor);
        };
      })(this));
    };

    FileHandler.prototype.handle_connection = function(editor) {
      var buffer, position, row;
      if (row = this.get("selection")) {
        row = parseInt(row, 10) - 1;
        position = new Point(row, 0);
        editor.scrollToBufferPosition(position, {
          center: true
        });
        editor.setCursorBufferPosition(position);
      }
      buffer = editor.getBuffer();
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(buffer.onDidSave((function(_this) {
        return function() {
          return _this.save();
        };
      })(this)));
      return this.subscriptions.add(buffer.onDidDestroy((function(_this) {
        return function() {
          return _this.close();
        };
      })(this)));
    };

    FileHandler.prototype.save = function() {
      var data;
      if (!this.session.alive) {
        console.log("[ratom] Error saving " + (path.basename(this.tempfile)) + " to " + this.remote_address);
        status - message.display("Error saving " + (path.basename(this.tempfile)) + " to " + this.remote_address, 2000);
        return;
      }
      console.log("[ratom] saving " + (path.basename(this.tempfile)) + " to " + this.remote_address);
      status - message.display("Saving " + (path.basename(this.tempfile)) + " to " + this.remote_address, 2000);
      this.session.send("save");
      this.session.send("token: " + this.settings['token']);
      data = fs.readFileSync(this.tempfile);
      this.session.send("data: " + Buffer.byteLength(data));
      return this.session.send(data);
    };

    FileHandler.prototype.close = function() {
      console.log("[ratom] closing " + (path.basename(this.tempfile)));
      this.subscriptions.dispose();
      return this.session.try_close();
    };

    return FileHandler;

  })();

  Session = (function() {
    function Session(socket) {
      this.should_parse_data = false;
      this.nconn = 0;
      this.socket = socket;
      this.send("Atom " + atom.getVersion());
      this.alive = true;
      socket.on("data", (function(_this) {
        return function(chunk) {
          return _this.parse_chunk(chunk);
        };
      })(this));
      socket.on("close", (function(_this) {
        return function() {
          if (_this.alive) {
            _this.alive = false;
            console.log("[ratom] connection lost!");
            return status - message.display("Connection lost!", 5000);
          }
        };
      })(this));
    }

    Session.prototype.parse_chunk = function(chunk) {
      var i, j, len, line, lines, match, results;
      if (chunk) {
        chunk = chunk.toString("utf8");
        match = /\n$/.test(chunk);
        chunk = chunk.replace(/\n$/, "");
        lines = chunk.split("\n");
        results = [];
        for (i = j = 0, len = lines.length; j < len; i = ++j) {
          line = lines[i];
          if (i < lines.length - 1 || match) {
            line = line + "\n";
          }
          results.push(this.parse_line(line));
        }
        return results;
      }
    };

    Session.prototype.parse_line = function(line) {
      if (this.should_parse_data) {
        this.file.append(line);
        if (this.file.ready) {
          this.should_parse_data = false;
          this.file.open();
          return this.file = null;
        }
      } else if (line.match(/open\s*$/)) {
        this.file = new FileHandler(this);
        return this.nconn += 1;
      } else {
        return this.parse_setting(line);
      }
    };

    Session.prototype.parse_setting = function(line) {
      var m;
      m = line.match(/([a-z\-]+?)\s*:\s*(.*?)\s*$/);
      if (m && (m[2] != null)) {
        this.file.set(m[1], m[2]);
        if (m[1] === "data") {
          this.file.create();
          return this.should_parse_data = true;
        }
      }
    };

    Session.prototype.send = function(cmd) {
      return this.socket.write(cmd + "\n");
    };

    Session.prototype.try_close = function() {
      this.nconn -= 1;
      if (this.alive && this.nconn === 0) {
        this.alive = false;
        this.send("close");
        this.send("");
        return this.socket.end();
      }
    };

    return Session;

  })();

  module.exports = {
    config: {
      launch_at_startup: {
        type: 'boolean',
        "default": false
      },
      keep_alive: {
        type: 'boolean',
        "default": false
      },
      port: {
        type: 'integer',
        "default": 52698
      }
    },
    server_is_running: false,
    activate: function(state) {
      if (atom.config.get("remote-atom.launch_at_startup")) {
        this.start_server();
      }
      atom.commands.add('atom-workspace', "remote-atom:start-server", (function(_this) {
        return function() {
          return _this.start_server();
        };
      })(this));
      return atom.commands.add('atom-workspace', "remote-atom:stop-server", (function(_this) {
        return function() {
          return _this.stop_server();
        };
      })(this));
    },
    deactivate: function() {
      return this.stop_server();
    },
    start_server: function(quiet) {
      var port;
      if (quiet == null) {
        quiet = false;
      }
      if (this.server_is_running) {
        this.stop_server();
        status - message.display("Restarting remote atom server", 2000);
      } else {
        if (!quiet) {
          status - message.display("Starting remote atom server", 2000);
        }
      }
      this.server = net.createServer(function(socket) {
        var session;
        console.log("[ratom] received connection from " + socket.remote_address);
        return session = new Session(socket);
      });
      port = atom.config.get("remote-atom.port");
      this.server.on('listening', (function(_this) {
        return function(e) {
          _this.server_is_running = true;
          return console.log("[ratom] listening on port " + port);
        };
      })(this));
      this.server.on('error', (function(_this) {
        return function(e) {
          if (!quiet) {
            status - message.display("Unable to start server", 2000);
            console.log("[ratom] unable to start server");
            console.log("[ratom] " + e);
          }
          if (atom.config.get("remote-atom.keep_alive")) {
            return setTimeout((function() {
              return _this.start_server(true);
            }), 10000);
          }
        };
      })(this));
      this.server.on("close", function() {
        return console.log("[ratom] stop server");
      });
      return this.server.listen(port, 'localhost');
    },
    stop_server: function() {
      status - message.display("Stopping remote atom server", 2000);
      if (this.server_is_running) {
        this.server.close();
        return this.server_is_running = false;
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
